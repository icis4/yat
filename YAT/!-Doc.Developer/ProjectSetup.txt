
YAT projects stick to the Visual Studio default as much as possible. Exceptions:
 > Non-imporant defaults are removed = implicitly stated rather than explicitly
    <FileAlignment>512</FileAlignment>
    <Deterministic>false</Deterministic>
    <Prefer32Bit>false</Prefer32Bit>
    <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
    ...

YAT (and especially MKY) projects stick to the most recent possible 'ToolsVersion' for allowing
YAT to be opened with older versions of Visual Studio. 'ToolsVersion' shall only be upgraded when
there are good reasons.

Most YAT projects contain 'Any CPU', x86 as well as x64 configurations.
See further below for details on 'Any CPU' as well as x86 and x64.

Project > Build > General
	@ Debug (all platforms)
		Define TRACE
		Define DEBUG
		CODE_ANALYSIS
		(@ Test projects = CODE_ANALYSIS;TEST (no space!))
	@ Release (all platforms)
		Define TRACE
		(@ Test projects = TEST)
		Optimize code

Project > Build > Output
	@ Any CPU
		bin\<Debug|Release>\
		Generate XML documentation file
	@ x86
		bin\x86\<Debug|Release>\
		No XML documentation
	@ x64
		bin\x64\<Debug|Release>\
		No XML documentation


x86 and x64
-----------
There are use cases where YAT sub-projects/assemblies are used in conjunction with non-managed C++
assemblies, e.g. in case of automatized software testing of embedded C++ code. In these cases, the
C++ code cannot be built into managed assemblies as it would no longer 1:1 relate to the C++ code
that is excuted on the embedded system. To support such use cases, YAT...
...projects contain x86 (and x64) configurations.
...a YAT assembly based solution can build and release x86 (and x64) configurations.

To provide this support to the end user, YAT must be built with x86 (and x64) respectively, And, it
must also be distributed as such. So far, only x86 is required, x64 is distributed as 'AnyCPU'. See
"\YAT\!-Doc.Project\6 - Release\YAT - Release.ods" for more information.

Rules:
> x86 EXEs/DLLs must be combined with x86 DLLs
> x64 EXEs/DLLs must be combined with x64 DLLs
> 'Any CPU' EXEs/DLLs must be combined with 'Any CPU' DLLs

Optimization:
> 'Any CPU' enables the .NET CLR to perform target-dependent optimizations.
> There are different opinions on the real benefits of such optimizations, you find pro's and con's.
> Nevertheless, the optimizations could at least result in better speed.
