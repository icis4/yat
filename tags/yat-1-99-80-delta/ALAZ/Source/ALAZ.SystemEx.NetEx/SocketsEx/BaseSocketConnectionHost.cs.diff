@@ -37,6 +37,19 @@
  * OF THE POSSIBILITY OF SUCH DAMAGE. 
  */
 
+#if (DEBUG)
+
+	// Enable debugging of exceptions:
+////#define DEBUG_EXCEPTIONS
+
+	// Enable debugging of shutdown:
+////#define DEBUG_SHUTDOWN
+
+#endif
+
+using System.Diagnostics;
+using System.Globalization;
+
 using System;
 using System.Collections.Generic;
 using System.Threading;
@@ -194,7 +207,17 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
                 FBufferManager = null;
             }
 
+            // ----- \remind BEGIN -----
+            // 2012-10-21 / Matthias Klaey
+            // Ensure that lock is properly released, even in cases where asynchronous calls are
+            // still being processed while the socket is free'd.
+
+            FSocketConnectionsSync.Dispose();
+
+            // ----- \remind  END  -----
+
             FSocketConnectionsSync = null;
+
             FSocketService = null;
             FDelimiter = null;
             FDelimiterEncrypt = null;
@@ -306,7 +329,27 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
 
                     if (creators.Length > 0)
                     {
-                        FWaitCreatorsDisposing.WaitOne(Timeout.Infinite, false);
+                        // ----- \remind BEGIN -----
+                        // 2010-05-14 / Matthias Klaey
+                        // Added catch (NullReferenceException) to handle cases where asynchronous
+                        // operations set the reference to null while this method is active.
+                        // 
+                        // 2012-10-23 / Matthias Klaey
+                        // Check (FWaitCreatorsDisposing != null) added to prevent exceptions.
+
+                        try
+                        {
+                            if (FWaitCreatorsDisposing != null)
+                                FWaitCreatorsDisposing.WaitOne(Timeout.Infinite, false);
+
+                            // Do not write the stack in the 'normal' case.
+                        }
+                        catch (NullReferenceException ex)
+                        {
+                            DebugExceptions(ex);
+                        }
+
+                        // ----- \remind  END  -----
                     }
 
                 }
@@ -329,8 +372,10 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
                 if (connections != null)
                 {
 
+                    DebugShutdownMessage("Resetting 'FWaitConnectionsDisposing'...");
                     FWaitConnectionsDisposing.Reset();
-                    
+                    DebugShutdownMessage("...'FWaitConnectionsDisposing' reset.");
+
                     int loopSleep = 0;
 
                     foreach (BaseSocketConnection connection in connections)
@@ -341,7 +386,9 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
 
                     if (connections.Length > 0)
                     {
+                        DebugShutdownMessage("Waiting 'FWaitConnectionsDisposing'...");
                         FWaitConnectionsDisposing.WaitOne(Timeout.Infinite, false);
+                        DebugShutdownMessage("...'FWaitConnectionsDisposing' waited.");
                     }
 
                 }
@@ -404,7 +451,11 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
 
         #region FireOnSent
 
-        private void FireOnSent(BaseSocketConnection connection, bool sentByServer)
+        // ----- \remind BEGIN -----
+        // 2012-10-13 / Matthias Klaey
+        // Added buffer which is now forwarded to FSocketService.OnSent().
+
+        private void FireOnSent(BaseSocketConnection connection, byte[] buffer, bool sentByServer)
         {
 
             if (!Disposed)
@@ -421,7 +472,7 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
 
                             case EventProcessing.epUser:
 
-                                FSocketService.OnSent(new MessageEventArgs(connection, null, sentByServer));
+                                FSocketService.OnSent(new MessageEventArgs(connection, buffer, sentByServer));
                                 break;
 
                             case EventProcessing.epEncrypt:
@@ -448,6 +499,8 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
 
         }
 
+        // ----- \remind  END  -----
+
         #endregion
 
         #region FireOnReceived
@@ -718,9 +771,15 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
                         connection.Stream.EndWrite(ar);
                         connection.SetConnectionData(0, connection.WriteOV.Count);
 
+                        // ----- \remind BEGIN -----
+                        // 2012-10-14 / Matthias Klaey
+                        // Clone buffer to forwared it to FireOnSent().
+
+                        byte[] buffer = (byte[])connection.WriteOV.Buffer.Clone();
+
                         FBufferManager.ReturnBuffer(connection.WriteOV.Buffer);
 
-                        FireOnSent(connection, sentByServer);
+                        FireOnSent(connection, buffer, sentByServer);
 
                         if (connection.Active)
                         {
@@ -748,6 +807,8 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
 
                         }
 
+                        // ----- \remind  END  -----
+
                     }
 
                 }
@@ -832,12 +893,18 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
                             }
                             else
                             {
+                                // ----- \remind BEGIN -----
+                                // 2012-10-14 / Matthias Klaey
+                                // Clone buffer to forwared it to FireOnSent().
 
+                                byte[] buffer = (byte[])e.Buffer.Clone();
+
                                 FBufferManager.ReturnBuffer(e.Buffer);
                                 e.SetBuffer(null, 0, 0);
 
-                                FireOnSent(connection, sentByServer);
+                                FireOnSent(connection, buffer, sentByServer);
 
+                                // ----- \remind  END  -----
                             }
 
                         }
@@ -1707,34 +1774,66 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
           if (!Disposed)
           {
 
-              if (socketConnection != null)
+              // ----- \remind BEGIN -----
+              // 2012-09-12 / Matthias Klaey (in Lianyungang :-)
+              // Added if != null due to NullReferenceExecption to finally{}.
+              // 
+              // 2012-10-15 / Matthias Klaey
+              // Added catch (NullReferenceException) to handle cases where asynchronous
+              // operations set the reference to null while this method is active.
+              // 
+              // 2012-10-23 / Matthias Klaey
+              // Rearranged checks (FSocketConnectionsSync != null) and (FSocketConnections != null).
+
+              if ((socketConnection != null)  && (FSocketConnectionsSync != null))
               {
 
-
                   FSocketConnectionsSync.EnterWriteLock();
 
                   try
                   {
+                      if (FSocketConnections != null)
+                          FSocketConnections.Remove(socketConnection.ConnectionId);
 
-                      FSocketConnections.Remove(socketConnection.ConnectionId);
-
+                      // Do not write the stack in the 'normal' case.
                   }
+                  catch (NullReferenceException ex)
+                  {
+                      DebugExceptions(ex);
+                  }
                   finally
                   {
-
-                      if (FSocketConnections.Count <= 0)
+                      try
                       {
-                          FWaitConnectionsDisposing.Set();
+                          if (FSocketConnections.Count <= 0)
+                          {
+                              DebugShutdownMessage("Setting 'FWaitConnectionsDisposing'...");
+                              FWaitConnectionsDisposing.Set();
+                              DebugShutdownMessage("...'FWaitConnectionsDisposing' set.");
+                          }
                       }
+                      catch (NullReferenceException ex)
+                      {
+                          DebugExceptions(ex);
+                      }
+                      catch (ObjectDisposedException ex)
+                      {
+                          DebugExceptions(ex);
+                      }
+                      finally
+                      {
+                          if (FSocketConnectionsSync != null)
+                              FSocketConnectionsSync.ExitWriteLock();
+                      }
 
-                      FSocketConnectionsSync.ExitWriteLock();
-
                   }
 
               }
 
-        }
+              // ----- \remind  END  -----
 
+          }
+
         }
 
         #endregion
@@ -1788,12 +1887,22 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
             if (!Disposed)
             {
 
+              // ----- \remind BEGIN -----
+              // 2012-10-28 / Matthias Klaey
+              // Handling exceptions:
+
+              try
+              {
+
                 connection.Active = false;
                 connection.Socket.Shutdown(SocketShutdown.Send);
 
-                lock (connection.WriteQueue)
+                if (connection.WriteQueue != null)
                 {
 
+                  lock (connection.WriteQueue)
+                  {
+
                     if (connection.WriteQueue.Count > 0)
                     {
 
@@ -1811,7 +1920,18 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
 
                     }
 
+                  }
+
                 }
+
+              }
+              catch (Exception ex)
+              {
+                  DebugExceptions(ex);
+              }
+
+              // ----- \remind  END  -----
+
             }
         }
 
@@ -2197,7 +2317,7 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
                     }
 
                 }
-                catch(Exception ex)
+                catch (Exception ex)
                 {
                     FireOnException(connection, ex);
                 }
@@ -2626,6 +2746,36 @@ namespace ALAZ.SystemEx.NetEx.SocketsEx
 
         #endregion
 
+		#region Debug
+		//==========================================================================================
+		// Debug
+		//==========================================================================================
+
+		[Conditional("DEBUG_EXCEPTIONS")]
+		private void DebugExceptions(Exception ex)
+		{
+			MKY.Diagnostics.DebugEx.WriteException(GetType(), ex, "This exception is intentionally output for debugging purposes. It indicates an issue in ALAZ.");
+		}
+
+		[Conditional("DEBUG_SHUTDOWN")]
+		private void DebugShutdownMessage(string message)
+		{
+			Debug.WriteLine
+			(
+				string.Format
+				(
+					CultureInfo.InvariantCulture,
+					" @ {0} @ Thread #{1} : {2} {3} : {4}",
+					DateTime.Now.ToString("HH:mm:ss.fff", DateTimeFormatInfo.InvariantInfo),
+					Thread.CurrentThread.ManagedThreadId.ToString("D3", CultureInfo.InvariantCulture),
+					GetType(),
+					"#" + this.FConnectionId.ToString("D2", CultureInfo.InvariantCulture),
+					message
+				)
+			);
+		}
+
+		#endregion
     }
 
 }
