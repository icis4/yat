<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HSR.Net.Sockets</name>
    </assembly>
    <members>
        <member name="T:HSR.Net.Sockets.SocketServer">
            <summary>
            Server connection host.
            </summary>
        </member>
        <member name="T:HSR.Net.Sockets.BaseSocketConnectionHost">
            <summary>
            The connection host.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.#ctor(HSR.Net.Sockets.HostType,HSR.Net.Sockets.ISocketService,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Base creator for BaseSocketConnectionHost.
            </summary>
            <param name="hostType">
            Host type.
            </param>
            <param name="socketService">
            Socket service.
            </param>
            <param name="header">
            Header byte array.
            </param>
            <param name="socketBufferSize">
            Socket buffer size.
            </param>
            <param name="messageBufferSize">
            Max message buffer size.
            </param>
            <param name="minThreads">
            Min threads in thread pool. if 0, the .Net thread pool will be used.
            </param>
            <param name="maxThreads">
            Max threads in thread pool. 
            </param>
            <param name="idleCheckInterval">
            Idle check interval timeout.
            </param>
            <param name="idleTimeOutValue">
            Idle connection timeout.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.Dispose">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.Finalize">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.AssertNotDisposed">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.Start">
            <summary>
            Starts the base host.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.Stop">
            <summary>
            Stop the base host.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.StopCreators">
            <summary>
            Stop the host creators.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.StopConnections">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.BeginSend(HSR.Net.Sockets.BaseSocketConnection,System.Byte[])">
            <summary>
            Begin send the data.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.BeginSendCallback(System.IAsyncResult)">
            <summary>
            Send Callback.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.BeginReceive(HSR.Net.Sockets.BaseSocketConnection)">
            <summary>
            Receive data from connection.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.BeginDisconnect(HSR.Net.Sockets.BaseSocketConnection,System.Exception)">
            <summary>
            Begin disconnect the connection
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.BeginDisconnectCallback(System.IAsyncResult)">
            <summary>
            Disconnect callback.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.AddCreator(HSR.Net.Sockets.BaseSocketConnectionCreator)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.RemoveCreator(HSR.Net.Sockets.BaseSocketConnectionCreator)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionHost.GetSocketCreators">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionHost.IsDisposed">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionHost.SocketBufferSize">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionHost.Header">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionHost.SocketService">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionHost.CheckTimeOutTimer">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionHost.IdleCheckInterval">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionHost.IdleTimeOutValue">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionHost.HostType">
            <summary></summary>
        </member>
        <member name="E:HSR.Net.Sockets.BaseSocketConnectionHost.OnException">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketServer.#ctor(HSR.Net.Sockets.ISocketService)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketServer.#ctor(HSR.Net.Sockets.ISocketService,System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketServer.#ctor(HSR.Net.Sockets.ISocketService,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketServer.#ctor(HSR.Net.Sockets.ISocketService,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketServer.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketServer.AddListener(System.Net.IPEndPoint)">
            <summary>
            Add the server connector (SocketListener).
            </summary>
            <param name="localEndPoint"></param>
        </member>
        <member name="M:HSR.Net.Sockets.SocketServer.AddListener(System.Net.IPEndPoint,HSR.Net.Sockets.Cryptography.EncryptionType,HSR.Net.Sockets.Compression.CompressionType,HSR.Net.Sockets.Cryptography.ICryptoService)">
            <summary>
            Add the server connector (SocketListener).
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketServer.AddListener(System.Net.IPEndPoint,HSR.Net.Sockets.Cryptography.EncryptionType,HSR.Net.Sockets.Compression.CompressionType,HSR.Net.Sockets.Cryptography.ICryptoService,System.Byte,System.Byte)">
            <summary>
            Add the server connector (SocketListener).
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketServer.Stop">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.Cryptography.EncryptionType">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.Cryptography.EncryptionType.None">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.Cryptography.EncryptionType.Base64">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.Cryptography.EncryptionType.TripleDES">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.Cryptography.EncryptionType.Rijndael">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.Cryptography.EncryptionType.SSL">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.Cryptography.XEncryptionType">
            <summary>
            Extended enum XEncryptionType.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.#ctor">
            <summary>Default is <see cref="F:HSR.Net.Sockets.Cryptography.EncryptionType.None"/></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.#ctor(HSR.Net.Sockets.Cryptography.EncryptionType)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.ToString">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.GetItems">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.op_Implicit(HSR.Net.Sockets.Cryptography.XEncryptionType)~HSR.Net.Sockets.Cryptography.EncryptionType">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.op_Implicit(HSR.Net.Sockets.Cryptography.EncryptionType)~HSR.Net.Sockets.Cryptography.XEncryptionType">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.op_Implicit(HSR.Net.Sockets.Cryptography.XEncryptionType)~System.Int32">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.op_Implicit(System.Int32)~HSR.Net.Sockets.Cryptography.XEncryptionType">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.op_Implicit(HSR.Net.Sockets.Cryptography.XEncryptionType)~System.String">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.XEncryptionType.op_Implicit(System.String)~HSR.Net.Sockets.Cryptography.XEncryptionType">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.AuthMessage">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.AuthMessage.SessionKey">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.AuthMessage.SessionIV">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.AuthMessage.SourceKey">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.AuthMessage.Sign">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.BaseSocketConnectionCreator">
            <summary>
            Connection creator using in BaseSocketConnectionHost.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionCreator.#ctor(HSR.Net.Sockets.BaseSocketConnectionHost,System.Net.IPEndPoint,HSR.Net.Sockets.Cryptography.EncryptionType,HSR.Net.Sockets.Compression.CompressionType,HSR.Net.Sockets.Cryptography.ICryptoService)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionCreator.Dispose">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionCreator.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionCreator.Finalize">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionCreator.AssertNotDisposed">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnectionCreator.InitializeConnection(HSR.Net.Sockets.BaseSocketConnection)">
            <summary>
            Initializes the connection with encryption.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionCreator.IsDisposed">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionCreator.Host">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionCreator.CryptoService">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionCreator.EncryptionType">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionCreator.LocalEndPoint">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnectionCreator.CompressionType">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.ConnectionEventArgs">
            <summary>
            Base event arguments for connection events.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.ConnectionEventArgs.#ctor(HSR.Net.Sockets.ISocketConnection)">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.ConnectionEventArgs.Connection">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.ConnectionEventArgs.CustomData">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.DisconnectedEventArgs">
            <summary>
            Disconnect event arguments for disconnected event.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.DisconnectedEventArgs.#ctor(HSR.Net.Sockets.ISocketConnection,System.Exception)">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.DisconnectedEventArgs.Exception">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.MessageEventArgs">
            <summary>
            Message event arguments for message events.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.MessageEventArgs.#ctor(HSR.Net.Sockets.ISocketConnection,System.Byte[])">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.MessageEventArgs.Buffer">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.ExceptionEventArgs">
            <summary>
            Exception event arguments for exception events.
            </summary>
        </member>
        <member name="F:HSR.Net.Sockets.ExceptionEventArgs.Exception">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.ExceptionEventArgs.#ctor(System.Exception)">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.Cryptography.BaseCryptoService">
            <summary>
            Base class for ICryptoServive. Use it overriding the virtual methods.
            </summary>
        </member>
        <member name="T:HSR.Net.Sockets.Cryptography.ICryptoService">
            <summary>
            Crypto service methods.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.ICryptoService.OnSymmetricAuthenticate(HSR.Net.Sockets.HostType,System.Security.Cryptography.RSACryptoServiceProvider@)">
            <summary>
            Fired when symmetric encryption is used.
            </summary>
            <param name="hostType">
            Type of host.
            </param>
            <param name="serverKey">
            The RSA provider used to encrypt symmetric IV and Key.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.ICryptoService.OnSSLClientAuthenticate(System.String@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection@,System.Boolean@)">
            <summary>
            Fired when SSL encryption is used in client host.
            </summary>
            <param name="ServerName">
            The host name in certificate.
            </param>
            <param name="certs">
            The certification collection to be used (null if not using client certification).
            </param>
            <param name="checkRevocation">
            Indicates if the certificated must be checked for revocation.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.ICryptoService.OnSSLServerAuthenticate(System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Boolean@,System.Boolean@)">
            <summary>
            Fired when SSL encryption is used in server host.
            </summary>
            <param name="certificate">
            The certificate to be used.
            </param>
            <param name="clientAuthenticate">
            Indicates if client connection will be authenticated (uses certificate).
            </param>
            <param name="checkRevocation">
            Indicates if the certificated must be checked for revocation.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.BaseCryptoService.OnSymmetricAuthenticate(HSR.Net.Sockets.HostType,System.Security.Cryptography.RSACryptoServiceProvider@)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.BaseCryptoService.OnSSLClientAuthenticate(System.String@,System.Security.Cryptography.X509Certificates.X509Certificate2Collection@,System.Boolean@)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.BaseCryptoService.OnSSLServerAuthenticate(System.Security.Cryptography.X509Certificates.X509Certificate2@,System.Boolean@,System.Boolean@)">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.CallbackData">
            <summary>
            Keeps connection event information between callbacks
            </summary>
        </member>
        <member name="T:HSR.Net.Sockets.SocketListener">
            <summary>
            Server socket connector.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketListener.#ctor(HSR.Net.Sockets.BaseSocketConnectionHost,System.Net.IPEndPoint,HSR.Net.Sockets.Cryptography.EncryptionType,HSR.Net.Sockets.Compression.CompressionType,HSR.Net.Sockets.Cryptography.ICryptoService,System.Byte,System.Byte)">
            <summary>
            Base SocketListener creator.
            </summary>
            <param name="host">
            Host.
            </param>
            <param name="localEndPoint">
            Local endpoint to be used.
            </param>
            <param name="encryptType">
            Encryption to be used.
            </param>
            <param name="compressionType">
            Compression to be used.
            </param>
            <param name="cryptoService">
            CryptoService. if null, will not be used.
            </param>
            <param name="backLog">
            Socket backlog queue number.
            </param>
            <param name="acceptThreads">
            Number of accept events to be used.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.SocketListener.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketListener.BeginAcceptCallback(System.IAsyncResult)">
            <summary>
            Accept callback!
            </summary>
        </member>
        <member name="T:HSR.Net.Sockets.Compression.CompressionType">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.Compression.CompressionType.None">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.Compression.CompressionType.GZip">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.Compression.XCompressionType">
            <summary>
            Extended enum XCompressionType.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.#ctor">
            <summary>Default is <see cref="F:HSR.Net.Sockets.Compression.CompressionType.None"/></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.#ctor(HSR.Net.Sockets.Compression.CompressionType)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.ToString">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.GetItems">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.op_Implicit(HSR.Net.Sockets.Compression.XCompressionType)~HSR.Net.Sockets.Compression.CompressionType">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.op_Implicit(HSR.Net.Sockets.Compression.CompressionType)~HSR.Net.Sockets.Compression.XCompressionType">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.op_Implicit(HSR.Net.Sockets.Compression.XCompressionType)~System.Int32">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.op_Implicit(System.Int32)~HSR.Net.Sockets.Compression.XCompressionType">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.op_Implicit(HSR.Net.Sockets.Compression.XCompressionType)~System.String">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Compression.XCompressionType.op_Implicit(System.String)~HSR.Net.Sockets.Compression.XCompressionType">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.HostType">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.HostType.Unknown">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.HostType.TcpClient">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.HostType.TcpServer">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.HostType.TcpAutoSocket">
            <summary></summary>
        </member>
        <member name="F:HSR.Net.Sockets.HostType.Udp">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.XHostType">
            <summary>
            Extended enum XHostType.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.#ctor">
            <summary>Default is <see cref="F:HSR.Net.Sockets.HostType.TcpAutoSocket"/></summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.#ctor(HSR.Net.Sockets.HostType)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.ToString">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.GetItems">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.op_Implicit(HSR.Net.Sockets.XHostType)~HSR.Net.Sockets.HostType">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.op_Implicit(HSR.Net.Sockets.HostType)~HSR.Net.Sockets.XHostType">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.op_Implicit(HSR.Net.Sockets.XHostType)~System.Int32">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.op_Implicit(System.Int32)~HSR.Net.Sockets.XHostType">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.op_Implicit(HSR.Net.Sockets.XHostType)~System.String">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.XHostType.op_Implicit(System.String)~HSR.Net.Sockets.XHostType">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.ClientSocketConnection">
            <summary>
            Client socket connection implementation.
            </summary>
        </member>
        <member name="T:HSR.Net.Sockets.BaseSocketConnection">
            <summary>
            Base socket connection
            </summary>
        </member>
        <member name="T:HSR.Net.Sockets.ISocketConnection">
            <summary>
            Common connection properties and methods.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.ISocketConnection.AsClientConnection">
            <summary>
            Represents the connection as a IClientSocketConnection.
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="M:HSR.Net.Sockets.ISocketConnection.AsServerConnection">
            <summary>
            Represents the connection as a IServerSocketConnection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HSR.Net.Sockets.ISocketConnection.BeginSend(System.Byte[])">
            <summary>
            Begin send data.
            </summary>
            <param name="buffer">
            Data to be sent.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.ISocketConnection.BeginReceive">
            <summary>
            Begin receive the data.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.ISocketConnection.BeginDisconnect">
            <summary>
            Begin disconnect the connection.
            </summary>
        </member>
        <member name="P:HSR.Net.Sockets.ISocketConnection.CustomData">
            <summary>
            Connection custom data.
            </summary>
        </member>
        <member name="P:HSR.Net.Sockets.ISocketConnection.Header">
            <summary>
            Connection service header.
            </summary>
        </member>
        <member name="P:HSR.Net.Sockets.ISocketConnection.ConnectionId">
            <summary>
            Connection Session Id (GUID).
            </summary>
        </member>
        <member name="P:HSR.Net.Sockets.ISocketConnection.SocketHandle">
            <summary>
            Handle of the OS Socket.
            </summary>
        </member>
        <member name="P:HSR.Net.Sockets.ISocketConnection.LocalEndPoint">
            <summary>
            Local socket endpoint.
            </summary>
        </member>
        <member name="P:HSR.Net.Sockets.ISocketConnection.RemoteEndPoint">
            <summary>
            Remote socket endpoint.
            </summary>
        </member>
        <member name="P:HSR.Net.Sockets.ISocketConnection.EncryptionType">
            <summary>
            Connection encrypt type.
            </summary>
        </member>
        <member name="P:HSR.Net.Sockets.ISocketConnection.CompressionType">
            <summary>
            Connection compression type.
            </summary>
        </member>
        <member name="P:HSR.Net.Sockets.ISocketConnection.HostType">
            <summary>
            Connection host type.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnection.Dispose">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnection.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnection.Finalize">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnection.AssertNotDisposed">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnection.AsClientConnection">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnection.AsServerConnection">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnection.BeginSend(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnection.BeginReceive">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnection.BeginDisconnect">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.BaseSocketConnection.BeginDisconnect(System.Exception)">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.IsDisposed">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.WriteQueue">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.WriteQueueHasItems">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.ReadCanEnqueue">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.ReadCount">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.SyncReadCount">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.Active">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.Encryptor">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.Decryptor">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.Stream">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.LastAction">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.Socket">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.Host">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.CustomData">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.Header">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.EncryptionType">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.CompressionType">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.HostType">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.LocalEndPoint">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.RemoteEndPoint">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.SocketHandle">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.BaseSocketConnection.ConnectionId">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.IClientSocketConnection">
            <summary>
            Client connection methods.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.IClientSocketConnection.BeginReconnect">
            <summary>
            Begin reconnect the connection.
            </summary>
        </member>
        <member name="T:HSR.Net.Sockets.MessageBuffer">
            <summary>
            Contains original buffer and the read/send buffer and offset.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.MessageBuffer.GetPacketMessage(HSR.Net.Sockets.BaseSocketConnection,System.Byte[]@)">
            <summary>
            Gets a packet message!
            </summary>
            <param name="connection">
            Socket connection.
            </param>
            <param name="buffer">
            Data.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.MessageBuffer.GetRawBuffer(System.Int32,System.Int32)">
            <summary>
            Get the buffer from packet message!
            </summary>
            <param name="messageLength">
            Message offset.
            </param>
            <param name="headerSize">
            Service header size.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.MessageBuffer.Resize(System.Int32)">
            <summary>
            Resize the buffer.
            </summary>
            <param name="newLength">
            The new length of buffer.
            </param>
        </member>
        <member name="T:HSR.Net.Sockets.Cryptography.Utilities">
            <summary>
            Cryptography utilities.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.Utilities.CreateSymmetricAlgoritm(HSR.Net.Sockets.Cryptography.EncryptionType)">
            <summary>
            Creates an asymmetric algoritm.
            </summary>
            <param name="encryptType">
            Encrypt type.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.Utilities.EncryptDataForAuthenticate(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts using default padding.
            </summary>
            <param name="sa">
            Algorithm.
            </param>
            <param name="buffer">
            Data to be encrypted.
            </param>
            <param name="padding">
            Padding.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.Utilities.DecryptDataForAuthenticate(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts using default padding.
            </summary>
            <param name="sa">
            Algorithm.
            </param>
            <param name="buffer">
            Data to be encrypted.
            </param>
            <param name="padding">
            Padding.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.Utilities.EncryptData(HSR.Net.Sockets.BaseSocketConnection,System.Byte[])">
            <summary>
            Encrypts the data.
            </summary>
            <param name="connection">
            Connection information.
            </param>
            <param name="buffer">
            Data to be encrypted.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.Cryptography.Utilities.DecryptData(HSR.Net.Sockets.BaseSocketConnection,System.Byte[]@,System.Int32)">
            <summary>
            Decrypts the data.
            </summary>
            <param name="connection">
            Connection information.
            </param>
            <param name="buffer">
            Data to be encrypted.
            </param>
            <param name="maxBufferSize">
            Max buffer size accepted.
            </param>
        </member>
        <member name="T:HSR.Net.Sockets.Utilities.WaitCallbackItem">
            <summary>
            Callback items for HostThreadPool.
            </summary>
        </member>
        <member name="T:HSR.Net.Sockets.Utilities.HostThreadPool">
            <summary>
            Host thread pool for connection events.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.Utilities.HostThreadPool.#ctor(HSR.Net.Sockets.BaseSocketConnectionHost,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Utilities.HostThreadPool.Dispose">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Utilities.HostThreadPool.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Utilities.HostThreadPool.Finalize">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Utilities.HostThreadPool.AssertNotDisposed">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Utilities.HostThreadPool.Start">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Utilities.HostThreadPool.Stop">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.Utilities.HostThreadPool.Enqueue(System.Threading.WaitCallback,HSR.Net.Sockets.ConnectionEventArgs)">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.Utilities.HostThreadPool.IsDisposed">
            <summary></summary>
        </member>
        <member name="P:HSR.Net.Sockets.Utilities.HostThreadPool.Active">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.ServerSocketConnection">
            <summary>
            Server connection implementation.
            </summary>
        </member>
        <member name="T:HSR.Net.Sockets.IServerSocketConnection">
            <summary>
            Server connection methods.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.IServerSocketConnection.BeginSendToAll(System.Byte[])">
            <summary>
            Begin send data to all server connections.
            </summary>
            <param name="buffer">
            Data to be sent.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.IServerSocketConnection.BeginSendTo(HSR.Net.Sockets.ISocketConnection,System.Byte[])">
            <summary>
            Begin send data to the connection.
            </summary>
            <param name="connection">
            The connection that the data will be sent.
            </param>
            <param name="buffer">
            Data to be sent.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.IServerSocketConnection.GetConnectionById(System.String)">
            <summary>
            Get the connection from the connectionId
            </summary>
            <param name="connectionId">
            The connectionId.
            </param>
            <returns>
            ISocketConnection to use.
            </returns>
        </member>
        <member name="T:HSR.Net.Sockets.ReconnectAttemptsException">
            <summary>
            Max reconnect attempts reached.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.ReconnectAttemptsException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.BadHeaderException">
            <summary>
            Bad Header.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.BadHeaderException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.MessageLengthException">
            <summary>
            Message length is greater than the maximum value.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.MessageLengthException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.SymmetricAuthenticationException">
            <summary>
            Symmetric authentication failure.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SymmetricAuthenticationException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.SSLAuthenticationException">
            <summary>
            SSL authentication failure.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SSLAuthenticationException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.Utilities.Buffer">
            <summary>
            Buffer tools.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.Utilities.Buffer.GetPacketMessage(HSR.Net.Sockets.BaseSocketConnection,System.Byte[]@)">
            <summary>
            Gets a packet message!
            </summary>
            <param name="connection">
            Socket connection.
            </param>
            <param name="buffer">
            Data.
            </param>
        </member>
        <member name="T:HSR.Net.Sockets.SocketConnector">
            <summary>
            Client socket creator.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketConnector.#ctor(HSR.Net.Sockets.BaseSocketConnectionHost,System.Net.IPEndPoint,HSR.Net.Sockets.Cryptography.EncryptionType,HSR.Net.Sockets.Compression.CompressionType,HSR.Net.Sockets.Cryptography.ICryptoService,System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Base SocketConnector creator.
            </summary>
            <param name="host">
            Host.
            </param>
            <param name="remoteEndPoint">
            The remote endpoint to connect.
            </param>
            <param name="encryptType">
            Encrypt type.
            </param>
            <param name="compressionType">
            Compression type.
            </param>
            <param name="cryptoService">
            CryptoService. if null, will not be used.
            </param>
            <param name="reconnectAttempts">
            Reconnect attempts.
            </param>
            <param name="reconnectAttemptInterval">
            Reconnect attempt interval.
            </param>
            <param name="localEndPoint">
            Local endpoint. if null, will be any address/port.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.SocketConnector.#ctor(HSR.Net.Sockets.BaseSocketConnectionHost,System.Net.IPEndPoint,HSR.Net.Sockets.Cryptography.EncryptionType,HSR.Net.Sockets.Compression.CompressionType,HSR.Net.Sockets.Cryptography.ICryptoService,System.Int32,System.Int32,System.Net.IPEndPoint,HSR.Net.Sockets.HostType)">
            <summary>
            Base SocketConnector creator.
            </summary>
            <param name="host">
            Host.
            </param>
            <param name="remoteEndPoint">
            The remote endpoint to connect.
            </param>
            <param name="encryptType">
            Encrypt type.
            </param>
            <param name="compressionType">
            Compression type.
            </param>
            <param name="cryptoService">
            CryptoService. if null, will not be used.
            </param>
            <param name="reconnectAttempts">
            Reconnect attempts.
            </param>
            <param name="reconnectAttemptInterval">
            Reconnect attempt interval.
            </param>
            <param name="localEndPoint">
            Local endpoint. if null, will be any address/port.
            </param>
            <param name="hostType">
            Host type, e.g. UDP.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.SocketConnector.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketConnector.BeginConnect">
            <summary>
            Begin the connection with host.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketConnector.BeginConnectCallback(System.IAsyncResult)">
            <summary>
            Connect callback!
            </summary>
            <param name="ar"></param>
        </member>
        <member name="T:HSR.Net.Sockets.ISocketService">
            <summary>
            Socket service methods.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.ISocketService.OnConnected(HSR.Net.Sockets.ConnectionEventArgs)">
            <summary>
            Fired when connected.
            </summary>
            <param name="e">
            Information about the connection.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.ISocketService.OnReceived(HSR.Net.Sockets.MessageEventArgs)">
            <summary>
            Fired when data arrives.
            </summary>
            <param name="e">
            Information about the Message.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.ISocketService.OnSent(HSR.Net.Sockets.MessageEventArgs)">
            <summary>
            Fired when data is sent.
            </summary>
            <param name="e">
            Information about the Message.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.ISocketService.OnDisconnected(HSR.Net.Sockets.DisconnectedEventArgs)">
            <summary>
            Fired when disconnected.
            </summary>
            <param name="e">
            Information about the connection.
            </param>
        </member>
        <member name="T:HSR.Net.Sockets.SocketClient">
            <summary>
            Socket client host.
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.#ctor(HSR.Net.Sockets.ISocketService)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.#ctor(HSR.Net.Sockets.ISocketService,System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.#ctor(HSR.Net.Sockets.ISocketService,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.#ctor(HSR.Net.Sockets.ISocketService,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.#ctor(HSR.Net.Sockets.HostType,HSR.Net.Sockets.ISocketService,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.BeginReconnect(HSR.Net.Sockets.ClientSocketConnection)">
            <summary>
            Reconnects the connection adjusting the reconnect timer.
            </summary>
            <param name="connection">
            Connection.
            </param>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.AddConnector(System.Net.IPEndPoint)">
            <summary>
            Adds the client connector (SocketConnector).
            </summary>
            <param name="remoteEndPoint"></param>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.AddConnector(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Adds the client connector (SocketConnector).
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.AddConnector(System.Net.IPEndPoint,HSR.Net.Sockets.Cryptography.EncryptionType,HSR.Net.Sockets.Compression.CompressionType,HSR.Net.Sockets.Cryptography.ICryptoService)">
            <summary>
            Adds the client connector (SocketConnector).
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.AddConnector(System.Net.IPEndPoint,HSR.Net.Sockets.Cryptography.EncryptionType,HSR.Net.Sockets.Compression.CompressionType,HSR.Net.Sockets.Cryptography.ICryptoService,System.Int32,System.Int32)">
            <summary>
            Adds the client connector (SocketConnector).
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.AddConnector(System.Net.IPEndPoint,HSR.Net.Sockets.Cryptography.EncryptionType,HSR.Net.Sockets.Compression.CompressionType,HSR.Net.Sockets.Cryptography.ICryptoService,System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Adds the client connector (SocketConnector).
            </summary>
        </member>
        <member name="M:HSR.Net.Sockets.SocketClient.Stop">
            <summary></summary>
        </member>
        <member name="T:HSR.Net.Sockets.AuthenticateCallbackData">
            <summary>
            Keeps connection authenticate information between callbacks
            </summary>
        </member>
    </members>
</doc>
