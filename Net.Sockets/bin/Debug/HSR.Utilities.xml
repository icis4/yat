<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HSR.Utilities</name>
    </assembly>
    <members>
        <member name="T:HSR.Utilities.Event.EventHelper">
            <summary>
            Events helper methods to defensivly publish events.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Event.EventHelper.FireSync(System.Delegate,System.Object[])">
            <summary>
            Fires event with supplied arguments synchronously. Event is
            fired safely, exceptions are caught. If an event sink implements
            <see cref="T:System.ComponentModel.ISynchronizeInvoke"/>,
            the event is invoked on that thread. Otherwise the event is
            invoked on the current thread.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Event.EventHelper.FireSync``1(System.Delegate,System.Object[])">
            <summary>
            Fires event with supplied arguments synchronously. Event is
            fired safely, exceptions are caught. If an event sink implements
            <see cref="T:System.ComponentModel.ISynchronizeInvoke"/>,
            the event is invoked on that thread. Otherwise the event is
            invoked on the current thread.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Event.EventHelper.FireSync``2(System.Delegate,System.Object[])">
            <summary>
            Fires event with supplied arguments synchronously. Event is
            fired safely, exceptions are caught. If an event sink implements
            <see cref="T:System.ComponentModel.ISynchronizeInvoke"/>,
            the event is invoked on that thread. Otherwise the event is
            invoked on the current thread.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Event.EventHelper.FireAsync(System.Delegate,System.Object[])">
            <summary>
            Fires event with supplied arguments synchronously. Event is
            fired safely, exceptions are caught. If an event sink implements
            <see cref="T:System.ComponentModel.ISynchronizeInvoke"/>,
            the event is invoked on that thread. Otherwise the event is
            invoked on a thread from the thread pool.
            </summary>
        </member>
        <member name="T:HSR.Utilities.Types.XDouble">
            <summary>
            Double utility methods.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XDouble.LimitToBounds(System.Double,System.Double,System.Double)">
            <summary>
            Limits "value" to the boundaries specified.
            </summary>
        </member>
        <member name="T:HSR.Utilities.Settings.ApplicationSettingsHandler`3">
            <summary></summary>
        </member>
        <member name="F:HSR.Utilities.Settings.ApplicationSettingsHandler`3.FileNameWithoutExtension">
            <summary></summary>
        </member>
        <member name="F:HSR.Utilities.Settings.ApplicationSettingsHandler`3.Extension">
            <summary></summary>
        </member>
        <member name="F:HSR.Utilities.Settings.ApplicationSettingsHandler`3.FileName">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.ApplicationSettingsHandler`3.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Handles common and user settings. Common settings are stored in
            <see cref="P:System.Windows.Forms.Application.CommonAppDataPath"/>, local user settings in
            <see cref="P:System.Windows.Forms.Application.LocalUserAppDataPath"/>, user settings in
            <see cref="P:System.Windows.Forms.Application.UserAppDataPath"/> in a file named
            <see cref="F:HSR.Utilities.Settings.ApplicationSettingsHandler`3.FileName"/>
            </summary>
        </member>
        <member name="M:HSR.Utilities.Settings.ApplicationSettingsHandler`3.ResetFileNames">
            <summary>
            Resets filenames to system defaults.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Settings.ApplicationSettingsHandler`3.Load">
            <summary>
            Loads settings from <see cref="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.CommonSettingsFilePath"/>,
            <see cref="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.LocalUserSettingsFilePath"/> and <see cref="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.RoamingUserSettingsFilePath"/>
            or creates default settings if file not found or not readable.
            </summary>
            <returns>
            Returns false if either settings could not be loaded from
            its file path and have been set to defaults.
            </returns>
            <exception cref="T:System.Exception">
            Thrown if settings could not be created.
            </exception>
        </member>
        <member name="M:HSR.Utilities.Settings.ApplicationSettingsHandler`3.Save">
            <summary>
            Tries to save settings to <see cref="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.CommonSettingsFilePath"/>,
            <see cref="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.LocalUserSettingsFilePath"/> and <see cref="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.RoamingUserSettingsFilePath"/>.
            </summary>
            <exception cref="T:System.Exception">
            Thrown if settings could not be saved.
            </exception>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.HasCommonSettings">
            <summary>
            Returns whether this handler has common settings.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.HasLocalUserSettings">
            <summary>
            Returns whether this handler has local user settings.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.HasRoamingUserSettings">
            <summary>
            Returns whether this handler has user settings.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.CommonSettingsFilePath">
            <summary>
            Complete path to common settings file, if has common settings,
            <see cref="F:System.String.Empty"/> otherwise.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown if attempted to set file if this handler has no common settings.
            </exception>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.LocalUserSettingsFilePath">
            <summary>
            Complete path to local user settings file, if has local user settings,
            <see cref="F:System.String.Empty"/> otherwise.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown if attempted to set file if this handler has no local user settings.
            </exception>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.RoamingUserSettingsFilePath">
            <summary>
            Complete path to roaming user settings file, if has roaming user settings,
            <see cref="F:System.String.Empty"/> otherwise.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown if attempted to set file if this handler has no roaming user settings.
            </exception>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.CommonSettings">
            <summary>
            Handler to common settings, if has common settings,
            "null" otherwise.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.LocalUserSettings">
            <summary>
            Handler to local user settings, if has local user settings,
            "null" otherwise.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.RoamingUserSettings">
            <summary>
            Handler to user settings, if has user settings,
            "null" otherwise.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.CommonSettingsDefault">
            <summary>
            Handler to common settings, if has common settings,
            "null" otherwise.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.LocalUserSettingsDefault">
            <summary>
            Handler to local user settings defaults, if has local user settings,
            "null" otherwise.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.ApplicationSettingsHandler`3.RoamingUserSettingsDefault">
            <summary>
            Handler to user settings defaults, if has user settings,
            "null" otherwise.
            </summary>
        </member>
        <member name="T:HSR.Utilities.Types.XEnum">
             <summary>
             Extended enumeration type which offers more features that a normal enum.
             XEnum uses an underlying enum to distinguish objects. Provide an enum,
             derive from XEnum, define new name/value methods if necessary
             and implement the conversion methods to get a fully functional XEnum.
             </summary>
             <remarks>
             Using a normal enum in client class has the big advantage, that code
             designers and features like IntelliSense can use their built-in enum
             support.
             </remarks>
             <example>
             
             -----------------------------------------------------------------
             Creating a concrete XEnum including implicit conversion operators
             -----------------------------------------------------------------
             
             public enum Mode
             {
            	    Fast = 1,
            	    Normal = 2,
            	    Slow = 3
             }
            
             public class XMode : XEnum
             {
            	    // Default is "Mode.Normal"
            	    public XMode() : base(Mode.Normal)
                 {
                 }
            
                 protected XMode(Mode mode) : base(mode)
                 {
                 }
            
                 public override string ToString()
                 {
                     return (UnderlyingEnum.GetHashCode().ToString());
                 }
               
                 public static XMode[] GetItems()
                 {
                     List[XMode] a = new List[XMode](); // [] must be replaced be angle brackets
                     a.Add(new XMode(Mode.Fast));
                     a.Add(new XMode(Mode.Normal));
                     a.Add(new XMode(Mode.Slow));
                     return (a.ToArray());
                 }
               
                 public static XMode Parse(string mode)
                 {
                     return ((XMode)int.Parse(mode));
                 }
               
                 public static implicit operator Mode(XMode mode)
                 {
                     return ((Mode)mode.UnderlyingEnum);
                 }
               
                 public static implicit operator XMode(Mode mode)
                 {
                     return (new XMode(mode));
                 }
               
                 public static implicit operator int(XMode mode)
                 {
                     return (mode.GetHashCode());
                 }
               
                 public static implicit operator XMode(int mode)
                 {
                     if      (mode >= (int)Mode.Slow)   return (new XMode(Mode.Slow));
               	    else if (mode >= (int)Mode.Normal) return (new XMode(Mode.Normal));
                     else                               return (new XMode(Mode.Fast));
                 }
               
                 public static implicit operator string(XMode mode)
                 {
            		    return (mode.ToString());
            	    }
            		
                 public static implicit operator XMode(string mode)
                 {
                    return (Parse(mode));
                 }
             }
            
             -------------------------------------------
             Adding XEnum design time support to a class
             -------------------------------------------
             
             public class XEnumClient
             {
                 private Mode _mode = Mode.Fast;         // Mode is a normal enum
                 ...
                 public Mode.Mode
                 {
                     get { return (_mode); }
                     set { _mode = value;  }
                 }
             }
             
             </example>
        </member>
        <member name="F:HSR.Utilities.Types.XEnum.UnderlyingEnum">
            <summary>
            Underlying enum.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.#ctor(System.Enum)">
            <summary>
            XEnum needs an underlying enum to be constructed.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object have value equality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.Equals(HSR.Utilities.Types.XEnum)">
            <summary>
            Determines whether this instance and the specified object have value equality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.ToString">
            <summary>
            Converts the value of this instance to its equivalent string
            representation.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.ToString(System.String)">
            <summary>
            Converts the value of this instance to its equivalent string
            representation using the specified format.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication
            of their relative values.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.Clone">
            <summary>
            Creates a deep copy of the XEnum and returns it.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.GetName(System.Type,System.Object)">
            <summary>
            Retrieves the name of the underlying enum constant in the specified
            XEnummeration that has the specified value.
            </summary>
            <param name="xEnumType">The Type of the XEnum.</param>
            <param name="value">
            The value of a particular enumerated constant in terms of its
            underlying enum.
            </param>
            <returns>
            A string containing the name of the enumerated constant in xe whose
            value is value, or a null reference (Nothing in Visual Basic) if no
            such constant is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            ex or value is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            value is not of type ex.
            </exception>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.GetNames(System.Type)">
            <summary>
            Retrieves an array of the underlying enum names of the constants in
            the specified XEnummeration.
            </summary>
            <param name="xEnumType">The Type of the XEnum.</param>
            <returns>
            A string array of the names of the constants in enumType. The elements
            of the array are sorted by the values of the enumerated constants.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            ex or value is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.GetValues(System.Type)">
            <summary>
            Retrieves an array of the underlying enum values of the constants in
            the specified XEnummeration.
            </summary>
            <param name="xEnumType">The Type of the XEnum.</param>
            <returns>
            An Array of the values of the constants in enumType. The elements of
            the array are sorted by the values of the enumeration constants.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            ex or value is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.GetItems(System.Type)">
            <summary>
            Retrieves an array of the underlying enums in the specified
            XEnummeration.
            </summary>
            <param name="xEnumType">The Type of the XEnum.</param>
            <returns>
            An Array of the values of the constants in enumType. The elements of
            the array are sorted by the values of the enumeration constants.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            ex or value is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.IsDefined(System.Type,System.Object)">
            <summary>
            Returns an indication whether an underlying constant with a specified
            value exists in the specified enumeration.
            </summary>
            <param name="xEnumType">The Type of the XEnum.</param>
            <param name="value">The value or name of a constant in ex.</param>
            <returns>
            true if a constant in enumType has a value equal to value;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            ex or value is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of value is not an XEnum.
            
            -or-
            
            The type of value is not an underlying type of XEnum.
            </exception>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.Parse(System.Type,System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one
            or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="xEnumType">The Type of the XEnum.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <exception cref="T:System.ArgumentNullException">
            xEnumType or value is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            value is either an empty string or only contains white space.
            
            -or-
            
            value is a name, but not one of the named constants defined for the
            enumeration.
            </exception>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one
            or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="xEnumType">The Type of the XEnum.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <returns>An XEnum whose value is represented by value.</returns>
            <exception cref="T:System.ArgumentNullException">
            xEnumType or value is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            value is either an empty string or only contains white space.
            
            -or-
            
            value is a name, but not one of the named constants defined for the
            enumeration.
            </exception>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.Format(System.Type,System.Object,System.String)">
            <summary>
            Converts the specified value of a specified enumerated type to its
            equivalent string representation according to the specified format.
            </summary>
            <param name="xEnumType">The Type of the XEnum.</param>
            <param name="value">The value to convert.</param>
            <param name="format">The output format to use.</param>
            <returns>A string representation of value.</returns>
            <exception cref="T:System.ArgumentNullException">
            ex or value is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            The value is from an enumeration that differs in type from enumType.
            s
            -or-
            s
            The type of value is not an underlying type of enumType.
            </exception>
            <exception cref="T:System.FormatException">
            The format parameter contains an invalid value.
            </exception>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.Compare(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.op_Equality(HSR.Utilities.Types.XEnum,HSR.Utilities.Types.XEnum)">
            <summary>
            Determines whether the two specified objects have reference and value equality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.op_Inequality(HSR.Utilities.Types.XEnum,HSR.Utilities.Types.XEnum)">
            <summary>
            Determines whether the two specified objects have reference and value inequality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.op_LessThan(HSR.Utilities.Types.XEnum,HSR.Utilities.Types.XEnum)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.op_GreaterThan(HSR.Utilities.Types.XEnum,HSR.Utilities.Types.XEnum)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.op_LessThanOrEqual(HSR.Utilities.Types.XEnum,HSR.Utilities.Types.XEnum)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Types.XEnum.op_GreaterThanOrEqual(HSR.Utilities.Types.XEnum,HSR.Utilities.Types.XEnum)">
            <summary></summary>
        </member>
        <member name="T:HSR.Utilities.Types.XString">
            <summary>
            String utility methods.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XString.Left(System.String,System.Int32)">
            <summary>
            Truncates "truncateString" to the "length" leftmost characters.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XString.Mid(System.String,System.Int32,System.Int32)">
            <summary>
            Truncates "truncateString" from "begin" to "end".
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XString.Right(System.String,System.Int32)">
            <summary>
            Truncates "truncateString" to the "length" rightmost characters.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XString.Contains(System.String,System.Char[])">
            <summary>
            Returns whether "str" contains any of the "searchChars"
            </summary>
        </member>
        <member name="T:HSR.Utilities.IO.Logfile">
            <summary>
            Thread-safe log file.
            </summary>
        </member>
        <member name="M:HSR.Utilities.IO.Logfile.#ctor(System.String,System.Boolean)">
            <summary>
            Starts Logfile.
            </summary>
            <param name="path">Path of log file.</param>
            <param name="append">true to append to file, false to replace file.</param>
        </member>
        <member name="M:HSR.Utilities.IO.Logfile.WriteLine(System.String)">
            <summary>
            Writes a line into log file and adds a timestamp.
            </summary>
        </member>
        <member name="M:HSR.Utilities.IO.Logfile.Close">
            <summary>
            Closes log file.
            </summary>
        </member>
        <member name="P:HSR.Utilities.IO.Logfile.Path">
            <summary>
            Returns complete path of log file.
            </summary>
        </member>
        <member name="P:HSR.Utilities.IO.Logfile.UnderlyingStream">
            <summary>
            Returns underlying stream.
            </summary>
        </member>
        <member name="T:HSR.Utilities.IO.XFile">
            <summary>
            File utility methods.
            </summary>
        </member>
        <member name="M:HSR.Utilities.IO.XFile.MakeUniqueFileName(System.String)">
            <summary>
            Returns a unique file name for a file specified by path.
            </summary>
        </member>
        <member name="M:HSR.Utilities.IO.XFile.MakeUniqueFileName(System.String,System.String)">
            <summary>
            Returns a unique file name for a file specified by path, unique part is separated by separator string.
            </summary>
        </member>
        <member name="T:HSR.Utilities.Generic.VarianceWorkaround">
            <summary>
            Variance workaround, allows casts of generics (e.g. List of device to List of object)
            </summary>
            <remarks>
            Taken from "C# Programming Guide" topic "Variance in Generic Types"
            </remarks>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.Add``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
            <summary>
            Simple variance for single method, variance in one direction only 
            </summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.Convert``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Variance for enummerator, variance in one direction only so type expressinos are natural
            </summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.Convert``2(System.Collections.Generic.ICollection{``0})">
            <summary>
            Variance for collection, variance in both directions, causes issues similar to existing array variance
            </summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.Convert``2(System.Collections.Generic.IList{``0})">
            <summary>
            Variance for collection, variance in both directions, causes issues similar to existing array variance
            </summary>
        </member>
        <member name="T:HSR.Utilities.Generic.VarianceWorkaround.EnumerableWrapper`2">
            <summary>
            Wrapper for enummerator variance
            </summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.EnumerableWrapper`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.EnumerableWrapper`2.GetEnumerator">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.EnumerableWrapper`2.System#Collections#IEnumerable#GetEnumerator">
            <summary></summary>
        </member>
        <member name="T:HSR.Utilities.Generic.VarianceWorkaround.CollectionWrapper`2">
            <summary>
            Wrapper for collection variance
            </summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.CollectionWrapper`2.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.CollectionWrapper`2.Add(`1)">
            <summary>
            variance going the wrong way ... 
            ... can yield exceptions at runtime 
            </summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.CollectionWrapper`2.Clear">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.CollectionWrapper`2.Contains(`1)">
            <summary>
            variance going the wrong way ... 
            ... but the semantics of the method yields reasonable semantics
            </summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.CollectionWrapper`2.CopyTo(`1[],System.Int32)">
            <summary>
            variance going the right way ... 
            </summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.CollectionWrapper`2.Remove(`1)">
            <summary>
            variance going the wrong way ... 
            ... but the semantics of the method yields reasonable semantics
            </summary>
        </member>
        <member name="P:HSR.Utilities.Generic.VarianceWorkaround.CollectionWrapper`2.Count">
            <summary></summary>
        </member>
        <member name="P:HSR.Utilities.Generic.VarianceWorkaround.CollectionWrapper`2.IsReadOnly">
            <summary></summary>
        </member>
        <member name="T:HSR.Utilities.Generic.VarianceWorkaround.ListWrapper`2">
            <summary>
            Wrapper for list variance
            </summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.ListWrapper`2.#ctor(System.Collections.Generic.IList{`0})">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.ListWrapper`2.IndexOf(`1)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.ListWrapper`2.Insert(System.Int32,`1)">
            <summary>
            variance the wrong way ...
            ... can throw exceptions at runtime
            </summary>
        </member>
        <member name="M:HSR.Utilities.Generic.VarianceWorkaround.ListWrapper`2.RemoveAt(System.Int32)">
            <summary></summary>
        </member>
        <member name="P:HSR.Utilities.Generic.VarianceWorkaround.ListWrapper`2.Item(System.Int32)">
            <summary></summary>
        </member>
        <member name="T:HSR.Utilities.Types.XInt">
            <summary>
            Int utility methods.
            </summary>
            <remarks>
            Possible extensions:
            - ParseInside: get integer values inside strings (e.g. "COM5 (Device123B)" returns {5;123})
            </remarks>
        </member>
        <member name="M:HSR.Utilities.Types.XInt.LimitToBounds(System.Int32,System.Int32,System.Int32)">
            <summary>
            Limits "value" to the boundaries specified.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XInt.ConvertToBinaryString(System.Int32)">
            <summary>
            Converts value into binary string (e.g. "00010100").
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XInt.ConvertToOctalString(System.Int32)">
            <summary>
            Converts value into octal string (e.g. "024").
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XInt.ConvertToNumericBaseString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts value into a string with the given numeric base.
            </summary>
            <param name="numericBase">Numeric base (0 to 9)</param>
            <param name="value">Value to be converted</param>
            <param name="max">Maximum value</param>
        </member>
        <member name="M:HSR.Utilities.Types.XInt.TryParseBinary(System.String,System.Int32@)">
            <summary>
            Parses a binary string (e.g. "00101011"). String must not contain
            other characters than '0' or '1'.
            </summary>
            <param name="parseString">String to be parsed.</param>
            <param name="result">
            When this method returns, contains the 32-bit signed integer value equivalent
            to the number contained in parseString, if the conversion succeeded, or zero if the
            conversion failed. The conversion fails if the parseString parameter is null, is not
            of the correct format, or represents a number less than System.Int32.MinValue
            or greater than System.Int32.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>The corresponding integer value.</returns>
        </member>
        <member name="M:HSR.Utilities.Types.XInt.TryParseOctal(System.String,System.Int32@)">
            <summary>
            Parses a octal string (e.g. "54"). String must not contain other
            characters than '0' to '7'.
            </summary>
            <param name="parseString">String to be parsed.</param>
            <param name="result">
            When this method returns, contains the 32-bit signed integer value equivalent
            to the number contained in parseString, if the conversion succeeded, or zero if the
            conversion failed. The conversion fails if the parseString parameter is null, is not
            of the correct format, or represents a number less than System.Int32.MinValue
            or greater than System.Int32.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>The corresponding integer value.</returns>
        </member>
        <member name="M:HSR.Utilities.Types.XInt.TryParseNumericBase(System.Int32,System.String,System.Int32@)">
            <summary>
            Parses a string containing a value in any numeric base. String must not
            contain leading or trailing non-numeric characters.
            </summary>
            <param name="numericBase">Numeric base (0 to 9)</param>
            <param name="parseString">String to be parsed.</param>
            <param name="result">
            When this method returns, contains the 32-bit signed integer value equivalent
            to the number contained in parseString, if the conversion succeeded, or zero if the
            conversion failed. The conversion fails if the parseString parameter is null, is not
            of the correct format, or represents a number less than System.Int32.MinValue
            or greater than System.Int32.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>The corresponding integer value.</returns>
        </member>
        <member name="T:HSR.Utilities.Settings.SettingsEventArgs">
            <summary></summary>
        </member>
        <member name="F:HSR.Utilities.Settings.SettingsEventArgs.Source">
            <summary></summary>
        </member>
        <member name="F:HSR.Utilities.Settings.SettingsEventArgs.Inner">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.SettingsEventArgs.#ctor(HSR.Utilities.Settings.Settings)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.SettingsEventArgs.#ctor(HSR.Utilities.Settings.Settings,HSR.Utilities.Settings.SettingsEventArgs)">
            <summary></summary>
        </member>
        <member name="T:HSR.Utilities.Settings.SettingsType">
            <summary></summary>
        </member>
        <member name="F:HSR.Utilities.Settings.SettingsType.Explicit">
            <summary>
            Explicit (normal) user settings, user gets notified as soon as setting changes.
            E.g. communication settings or command definitions.
            </summary>
        </member>
        <member name="F:HSR.Utilities.Settings.SettingsType.Implicit">
            <summary>
            Implicit (hidden) user settings, user doesn't get notified when setting changes.
            E.g. window or layout settings that are automatically saved.
            </summary>
        </member>
        <member name="T:HSR.Utilities.Settings.Settings">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.#ctor">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.#ctor(HSR.Utilities.Settings.SettingsType)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.#ctor(HSR.Utilities.Settings.Settings)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.AttachNode(HSR.Utilities.Settings.Settings)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.ReplaceNode(HSR.Utilities.Settings.Settings,HSR.Utilities.Settings.Settings)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.SetChanged">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.ClearChanged">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.SetDefaults">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.SetMyDefaults">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object have value equality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.Equals(HSR.Utilities.Settings.Settings)">
            <summary>
            Determines whether this instance and the specified object have value equality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.OnChanged(HSR.Utilities.Settings.SettingsEventArgs)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.SuspendChangeEvent">
            <summary>
            Temporarily suspends the change event for the settings and all nodes of the settings tree.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.ResumeChangeEvent">
            <summary>
            Resumes change events.
            </summary>
            <remarks>
            Calling the ResumeChangeEvent method forces changed events if there are any pending events.
            </remarks>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.ResumeChangeEvent(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.ForceChangeEvent">
            <summary>
            Forces a change event on the settings and all nodes of the settings tree.
            The event is fired even if the settings have not changed.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.op_Equality(HSR.Utilities.Settings.Settings,HSR.Utilities.Settings.Settings)">
            <summary>
            Determines whether the two specified objects have reference and value equality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Settings.Settings.op_Inequality(HSR.Utilities.Settings.Settings,HSR.Utilities.Settings.Settings)">
            <summary>
            Determines whether the two specified objects have reference and value inequality.
            </summary>
        </member>
        <member name="E:HSR.Utilities.Settings.Settings.Changed">
            <summary></summary>
        </member>
        <member name="P:HSR.Utilities.Settings.Settings.SettingsType">
            <summary></summary>
        </member>
        <member name="P:HSR.Utilities.Settings.Settings.HaveChanged">
            <summary></summary>
        </member>
        <member name="P:HSR.Utilities.Settings.Settings.ExplicitHaveChanged">
            <summary></summary>
        </member>
        <member name="T:HSR.Utilities.IO.XPath">
            <summary>
            Summary description for Utilities.
            </summary>
        </member>
        <member name="M:HSR.Utilities.IO.XPath.LimitPath(System.String,System.Int32)">
            <summary>
            Limits a folder or file path to the specified max length.
            </summary>
        </member>
        <member name="T:HSR.Utilities.Recent.RecentItemCollection`1">
            <summary>
            Collection for recent items like recent files, provides methods to handle the recent items.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItemCollection`1.#ctor">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItemCollection`1.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItemCollection`1.#ctor(System.Collections.Generic.IEnumerable{HSR.Utilities.Recent.RecentItem{`0}})">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItemCollection`1.#ctor(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItemCollection`1.ReplaceOrInsertAtBeginAndRemoveMostRecentIfNecessary(HSR.Utilities.Recent.RecentItem{`0})">
            <summary>
            Inserts the recent item at the beginning of the collection (least recent) and remove the
            most recent item if the collection already contains <see cref="P:HSR.Utilities.Recent.RecentItemCollection`1.MaximumCapacity"/> items.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItemCollection`1.RemoveMostRecent">
            <summary>
            Remove the most recent item if the collection already contains
            <see cref="P:HSR.Utilities.Recent.RecentItemCollection`1.MaximumCapacity"/> items.
            </summary>
            <returns>
            true if an item is successfully removed; otherwise, false. This method also returns
            false if no item was not found in the collection.
            </returns>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItemCollection`1.ValidateAll">
            <summary>
            Validates all recent items, invalid items are removed from the collection
            </summary>
        </member>
        <member name="P:HSR.Utilities.Recent.RecentItemCollection`1.MaximumCapacity">
            <summary>
            The maximum capacity of the collection.
            </summary>
        </member>
        <member name="T:HSR.Utilities.Diagnostics.DebugOutput">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Diagnostics.DebugOutput.WriteException(System.Object,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:HSR.Utilities.Drawing.XDrawing">
            <summary>
            Drawing utility methods.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Drawing.XDrawing.ConvertContentAlignmentToTextFormatFlags(System.Drawing.ContentAlignment)">
            <summary>
            Converts a <see cref="T:System.Drawing.ContentAlignment"/> enum to a <see cref="T:System.Windows.Forms.TextFormatFlags"/> enum.
            Can be used for user drawn controls.
            </summary>
            <param name="contentAlignment">ContentAlignment to be converted.</param>
            <returns>Converted TextFormatFlags</returns>
        </member>
        <member name="M:HSR.Utilities.Drawing.XDrawing.ApplyContentAlignmentToTextFormatFlags(System.Drawing.ContentAlignment,System.Windows.Forms.TextFormatFlags)">
            <summary>
            Applies a <see cref="T:System.Drawing.ContentAlignment"/> enum to a <see cref="T:System.Windows.Forms.TextFormatFlags"/> enum.
            Can be used for user drawn controls.
            </summary>
            <param name="contentAlignment">ContentAlignment to be converted.</param>
            <param name="textFormatFlags">TextFormatFlags to be changed.</param>
            <returns>Changed TextFormatFlags</returns>
        </member>
        <member name="T:HSR.Utilities.Net.Browser">
            <summary>
            Browser utility methods.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Net.Browser.BrowseUrl(System.String)">
            <summary>
            Opens the system default browser and browses url.
            </summary>
            <param name="url">URL to browse</param>
        </member>
        <member name="T:HSR.Utilities.Types.XByte">
            <summary>
            Byte utility methods.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XByte.ConvertToBinaryString(System.Byte)">
            <summary>
            Converts value into binary string (e.g. "00010100").
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.XByte.ConvertToOctalString(System.Byte)">
            <summary>
            Converts value into octal string (e.g. "024").
            </summary>
        </member>
        <member name="T:HSR.Utilities.Recent.RecentItem`1">
            <summary>
            Item for collections like recent files, encapsulates an item with a time stamp.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.#ctor">
            <summary></summary>
            <remarks>
            Needed for XML serialization.
            </remarks>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.#ctor(`0)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.#ctor(`0,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.ToString">
            <summary>
            Returns the recent item.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object have value equality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.Equals(HSR.Utilities.Recent.RecentItem{`0})">
            <summary>
            Determines whether this instance and the specified object have value equality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication
            of their relative values.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.Compare(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.op_Equality(HSR.Utilities.Recent.RecentItem{`0},HSR.Utilities.Recent.RecentItem{`0})">
            <summary>
            Determines whether the two specified objects have reference and value equality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.op_Inequality(HSR.Utilities.Recent.RecentItem{`0},HSR.Utilities.Recent.RecentItem{`0})">
            <summary>
            Determines whether the two specified objects have reference and value inequality.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.op_LessThan(HSR.Utilities.Recent.RecentItem{`0},HSR.Utilities.Recent.RecentItem{`0})">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.op_GreaterThan(HSR.Utilities.Recent.RecentItem{`0},HSR.Utilities.Recent.RecentItem{`0})">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.op_LessThanOrEqual(HSR.Utilities.Recent.RecentItem{`0},HSR.Utilities.Recent.RecentItem{`0})">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.op_GreaterThanOrEqual(HSR.Utilities.Recent.RecentItem{`0},HSR.Utilities.Recent.RecentItem{`0})">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.op_Implicit(HSR.Utilities.Recent.RecentItem{`0})~`0">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Recent.RecentItem`1.op_Implicit(`0)~HSR.Utilities.Recent.RecentItem{`0}">
            <summary></summary>
        </member>
        <member name="P:HSR.Utilities.Recent.RecentItem`1.Item">
            <summary>
            The recent item.
            </summary>
            <remarks>
            Set property needed for XML serialization.
            </remarks>
        </member>
        <member name="P:HSR.Utilities.Recent.RecentItem`1.TimeStamp">
            <summary>
            The time stamp to the recent item.
            </summary>
            <remarks>
            Set property needed for XML serialization.
            </remarks>
        </member>
        <member name="P:HSR.Utilities.Recent.RecentItem`1.IsValid">
            <summary>
            Checks whether the item is valid.
            </summary>
        </member>
        <member name="T:HSR.Utilities.Text.SupportedEncoding">
            <summary>
            Encodings that are supported by YAT.
            </summary>
            <remarks>
            Enum value corresponds to code page.
            </remarks>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ASCII">
            <summary>US-ASCII</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.UTF7">
            <summary>Unicode (UTF-7)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.UTF8">
            <summary>Unicode (UTF-8)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.UTF16">
            <summary>Unicode</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.UTF16BE">
            <summary>Unicode (Big-Endian)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.UTF32">
            <summary>Unicode (UTF-32)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.UTF32BE">
            <summary>Unicode (UTF-32 Big-Endian)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_1">
            <summary>Western European (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_2">
            <summary>Central European (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_3">
            <summary>Latin 3 (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_4">
            <summary>Baltic (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_5">
            <summary>Cyrillic (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_6">
            <summary>Arabic (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_7">
            <summary>Greek (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_8">
            <summary>Hebrew (ISO-Visual)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_8I">
            <summary>Hebrew (ISO-Logical)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_9">
            <summary>Turkish (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_13">
            <summary>Estonian (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO8859_15">
            <summary>Latin 9 (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO2022JP">
            <summary>Japanese (JIS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.CSISO2022JP">
            <summary>Japanese (JIS-Allow 1 byte Kana)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO2022JP_A">
            <summary>Japanese (JIS-Allow 1 byte Kana - SO/SI)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ISO2022KR">
            <summary>Korean (ISO)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Windows1252">
            <summary>Western European (Windows)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Windows1250">
            <summary>Central European (Windows)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Windows1251">
            <summary>Cyrillic (Windows)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Windows1253">
            <summary>Greek (Windows)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Windows1254">
            <summary>Turkish (Windows)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Windows1255">
            <summary>Hebrew (Windows)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Windows1256">
            <summary>Arabic (Windows)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Windows1257">
            <summary>Baltic (Windows)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Windows1258">
            <summary>Vietnamese (Windows)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Windows874">
            <summary>Thai (Windows)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Macintosh">
            <summary>Western European (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacCE">
            <summary>Central European (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacJapanese">
            <summary>Japanese (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacChineseTrad">
            <summary>Chinese Traditional (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacChineseSimp">
            <summary>Chinese Simplified (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacKorean">
            <summary>Korean (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacArabic">
            <summary>Arabic (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacHebrew">
            <summary>Hebrew (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacGreek">
            <summary>Greek (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacCyrillic">
            <summary>Cyrillic (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacRomanian">
            <summary>Romanian (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacUkrainian">
            <summary>Ukrainian (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacThai">
            <summary>Thai (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacIcelandic">
            <summary>Icelandic (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacTurkish">
            <summary>Turkish (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.XMacCroatian">
            <summary>Croatian (Mac)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.EUC_JP">
            <summary>Japanese (JIS 0208-1990 and 0212-1990)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.EUC_JP_A">
            <summary>Japanese (EUC)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.EUC_CN">
            <summary>Chinese Simplified (EUC)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.EUC_KR">
            <summary>Korean (EUC)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1047">
            <summary>IBM Latin-1</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM924">
            <summary>IBM Latin-1</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM500">
            <summary>IBM EBCDIC (International)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM037">
            <summary>IBM EBCDIC (US-Canada)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM870">
            <summary>IBM EBCDIC (Multilingual Latin-2)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM423">
            <summary>IBM EBCDIC (Greek)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.CP875">
            <summary>IBM EBCDIC (Greek Modern)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM880">
            <summary>IBM EBCDIC (Cyrillic Russian)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.CP1025">
            <summary>IBM EBCDIC (Cyrillic Serbian-Bulgarian)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM905">
            <summary>IBM EBCDIC (Turkish)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1026">
            <summary>IBM EBCDIC (Turkish Latin-5)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1140">
            <summary>IBM EBCDIC (US-Canada-Euro)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1141">
            <summary>IBM EBCDIC (Germany-Euro)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1142">
            <summary>IBM EBCDIC (Denmark-Norway-Euro)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1143">
            <summary>IBM EBCDIC (Finland-Sweden-Euro)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1144">
            <summary>IBM EBCDIC (Italy-Euro)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1145">
            <summary>IBM EBCDIC (Spain-Euro)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1146">
            <summary>IBM EBCDIC (UK-Euro)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1147">
            <summary>IBM EBCDIC (France-Euro)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1148">
            <summary>IBM EBCDIC (International-Euro)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM1149">
            <summary>IBM EBCDIC (Icelandic-Euro)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM273">
            <summary>IBM EBCDIC (Germany)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM277">
            <summary>IBM EBCDIC (Denmark-Norway)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM278">
            <summary>IBM EBCDIC (Finland-Sweden)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM871">
            <summary>IBM EBCDIC (Icelandic)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM280">
            <summary>IBM EBCDIC (Italy)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM284">
            <summary>IBM EBCDIC (Spain)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM285">
            <summary>IBM EBCDIC (UK)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM297">
            <summary>IBM EBCDIC (France)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM420">
            <summary>IBM EBCDIC (Arabic)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM424">
            <summary>IBM EBCDIC (Hebrew)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM290">
            <summary>IBM EBCDIC (Japanese katakana)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBMThai">
            <summary>IBM EBCDIC (Thai)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_EBCDIC_KoreanExtended">
            <summary>IBM EBCDIC (Korean Extended)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM437">
            <summary>OEM United States</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM855">
            <summary>OEM Cyrillic</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM858">
            <summary>OEM Multilingual Latin I</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM850">
            <summary>Western European (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM852">
            <summary>Central European (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM737">
            <summary>Greek (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM869">
            <summary>Greek, Modern (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM775">
            <summary>Baltic (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.CP866">
            <summary>Cyrillic (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM860">
            <summary>Portuguese (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM861">
            <summary>Icelandic (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM863">
            <summary>French Canadian (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM865">
            <summary>Nordic (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM857">
            <summary>Turkish (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.DOS720">
            <summary>Arabic (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.IBM864">
            <summary>Arabic (864)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.DOS862">
            <summary>Hebrew (DOS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.KOI8_R">
            <summary>Cyrillic (KOI8-R)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.KOI8_U">
            <summary>Cyrillic (KOI8-U)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.ASMO_708">
            <summary>Arabic (ASMO 708)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Shift_JIS">
            <summary>Japanese (Shift-JIS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.GB2312">
            <summary>Chinese Simplified (GB2312)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.GB18030">
            <summary>Chinese Simplified (GB18030)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.HZ_GB_2312">
            <summary>Chinese Simplified (HZ)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Big5">
            <summary>Chinese Traditional (Big5)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_CP20936">
            <summary>Chinese Simplified (GB2312-80)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_CP20949">
            <summary>Korean Wansung</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.KS_C_5601_1987">
            <summary>Korean</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.Johab">
            <summary>Korean (Johab)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_Europa">
            <summary>Europa</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ChineseCNS">
            <summary>Chinese Traditional (CNS)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ChineseEten">
            <summary>Chinese Traditional (Eten)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_IA5">
            <summary>Western European (IA5)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_IA5_German">
            <summary>German (IA5)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_IA5_Swedish">
            <summary>Swedish (IA5)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_IA5_Norwegian">
            <summary>Norwegian (IA5)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_CP20001">
            <summary>TCA Taiwan</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_CP20003">
            <summary>IBM5550 Taiwan</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_CP20004">
            <summary>TeleText Taiwan</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_CP20005">
            <summary>Wang Taiwan</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_CP50227">
            <summary>Chinese Simplified (ISO-2022)</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_CP20261">
            <summary>T.61</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_CP20269">
            <summary>ISO-6937</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ISCII_DE">
            <summary>ISCII Devanagari</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ISCII_BE">
            <summary>ISCII Bengali</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ISCII_TA">
            <summary>ISCII Tamil</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ISCII_TE">
            <summary>ISCII Telugu</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ISCII_AS">
            <summary>ISCII Assamese</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ISCII_OR">
            <summary>ISCII Oriya</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ISCII_KA">
            <summary>ISCII Kannada</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ISCII_MA">
            <summary>ISCII Malayalam</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ISCII_GU">
            <summary>ISCII Gujarati</summary>
        </member>
        <member name="F:HSR.Utilities.Text.SupportedEncoding.X_ISCII_PA">
            <summary>ISCII Punjabi</summary>
        </member>
        <member name="T:HSR.Utilities.Text.XEncoding">
            <summary>
            Extended enum XEncoding.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.#ctor">
            <summary>
            Default is <see cref="P:System.Text.Encoding.Default"/>.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.#ctor(HSR.Utilities.Text.SupportedEncoding)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.GetEncoding">
            <summary>
            Returns encoding object.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.ToString">
            <summary>
            Returns "DisplayName [CodePage]".
            </summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.GetHashCode">
            <summary>
            Returns code page.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.GetItems">
            <summary>
            Returns all available encodings in a useful order.
            </summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.Parse(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.Parse(System.Text.Encoding)">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.op_Implicit(HSR.Utilities.Text.XEncoding)~HSR.Utilities.Text.SupportedEncoding">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.op_Implicit(HSR.Utilities.Text.SupportedEncoding)~HSR.Utilities.Text.XEncoding">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.op_Implicit(HSR.Utilities.Text.XEncoding)~System.Text.Encoding">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.op_Implicit(System.Text.Encoding)~HSR.Utilities.Text.XEncoding">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.op_Implicit(HSR.Utilities.Text.XEncoding)~System.Int32">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.op_Implicit(System.Int32)~HSR.Utilities.Text.XEncoding">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.op_Implicit(HSR.Utilities.Text.XEncoding)~System.String">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Text.XEncoding.op_Implicit(System.String)~HSR.Utilities.Text.XEncoding">
            <summary></summary>
        </member>
        <member name="P:HSR.Utilities.Text.XEncoding.CodePage">
            <summary>
            Encoding code page.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Text.XEncoding.Name">
            <summary>
            Unified encoding name.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Text.XEncoding.DisplayName">
            <summary>
            Human readable encoding name.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Text.XEncoding.IsDefault">
            <summary>
            Returns whether this instance is using the default encoding.
            </summary>
        </member>
        <member name="T:HSR.Utilities.Types.Ascii">
            <summary>
            Ascii code conversions. Source: www.asciitable.com
            </summary>
        </member>
        <member name="M:HSR.Utilities.Types.Ascii.ConvertToMnemonic(System.Byte)">
            <summary>
            Converts an ascii code into according mnemonic.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if code out of range 0x00 to 0x1F</exception>
        </member>
        <member name="M:HSR.Utilities.Types.Ascii.Parse(System.String)">
            <summary>
            Converts an ascii mnemonic into according code. Case-insensitive.
            </summary>
            <exception cref="T:System.FormatException">Thrown if mnemonic unknown</exception>
        </member>
        <member name="M:HSR.Utilities.Types.Ascii.TryParse(System.String,System.Byte@)">
            <summary>
            Converts an ascii mnemonic into according code. Case-insensitive.
            </summary>
        </member>
        <member name="T:HSR.Utilities.Settings.DocumentSettingsHandler`1">
            <summary></summary>
        </member>
        <member name="M:HSR.Utilities.Settings.DocumentSettingsHandler`1.#ctor">
            <summary>
            Handles document settings. Settings are stored in filePath
            <see cref="P:HSR.Utilities.Settings.DocumentSettingsHandler`1.SettingsFilePath"/>
            </summary>
        </member>
        <member name="M:HSR.Utilities.Settings.DocumentSettingsHandler`1.#ctor(`0)">
            <summary>
            Handles document settings. Settings are stored in filePath
            <see cref="P:HSR.Utilities.Settings.DocumentSettingsHandler`1.SettingsFilePath"/>
            </summary>
        </member>
        <member name="M:HSR.Utilities.Settings.DocumentSettingsHandler`1.Load">
            <summary>
            Loads settings from <see cref="P:HSR.Utilities.Settings.DocumentSettingsHandler`1.SettingsFilePath"/>
            or creates default settings if file path not found or not readable.
            </summary>
            <returns>
            Returns false if either settings could not be loaded from
            <see cref="P:HSR.Utilities.Settings.DocumentSettingsHandler`1.SettingsFilePath"/> and have been set to defaults.
            </returns>
            <exception cref="T:System.Exception">
            Thrown if settings could not be created.
            </exception>
        </member>
        <member name="M:HSR.Utilities.Settings.DocumentSettingsHandler`1.Save">
            <summary>
            Tries to save settings to <see cref="P:HSR.Utilities.Settings.DocumentSettingsHandler`1.SettingsFilePath"/>.
            </summary>
            <exception cref="T:System.Exception">
            Thrown if settings could not be saved.
            </exception>
        </member>
        <member name="P:HSR.Utilities.Settings.DocumentSettingsHandler`1.SettingsFilePath">
            <summary>
            Complete path to document settings filePath.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.DocumentSettingsHandler`1.SettingsFileExists">
            <summary>
            Returns whether the settings filePath exists.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.DocumentSettingsHandler`1.Settings">
            <summary>
            Handler to user settings, if has user settings,
            "null" otherwise.
            </summary>
        </member>
        <member name="P:HSR.Utilities.Settings.DocumentSettingsHandler`1.SettingsDefault">
            <summary>
            Handler to common settings, if has common settings,
            "null" otherwise.
            </summary>
        </member>
    </members>
</doc>
